shader_type canvas_item;

// The output color for the outline
uniform vec4 outline_color : hint_color;
uniform bool active = false;

void fragment() {
	vec4 screen_color = texture(SCREEN_TEXTURE, SCREEN_UV);
	vec4 tex_color = texture(TEXTURE, UV);
	COLOR = tex_color;

	COLOR.rgb = outline_color.rgb;
	
	// We convert the pixel width we want for our outline in decimal texel size.
	vec2 size = vec2(1.0) / vec2(textureSize(TEXTURE, 0));
	
	// We sample and offset the texture 8 times to draw an outline.
	float alpha = tex_color.a;
	alpha += texture(TEXTURE, UV + vec2(0.0, -size.y)).a;
	alpha += texture(TEXTURE, UV + vec2(size.x, -size.y)).a;
	alpha += texture(TEXTURE, UV + vec2(size.x, 0.0)).a;
	alpha += texture(TEXTURE, UV + vec2(size.x, size.y)).a;
	alpha += texture(TEXTURE, UV + vec2(0.0, size.y)).a;
	alpha += texture(TEXTURE, UV + vec2(-size.x, size.y)).a;
	alpha += texture(TEXTURE, UV + vec2(-size.x, 0.0)).a;
	alpha += texture(TEXTURE, UV + vec2(-size.x, -size.y)).a;
	
	// If the summed alpha is too high, it means we're over the original texture
	// and we don't want to draw this pixel; it's not part of the outline.
	if (alpha > 0.0 && COLOR.a == 0.0) {
		alpha = 1.0;
	}else{
		alpha = 0.0;
	}
	
	// We then override the texture's color with the calculated outline.
	if (!active || alpha <= 0.0) {
		COLOR = tex_color;
	}else{
		COLOR = vec4(outline_color.rgb, min(alpha, 1.0));
	}
	//COLOR = vec4(1.0);
}